from aiogram.types import ChatMemberUpdated
from aiogram.enums import ChatMemberStatus
from asyncpg import PostgresError

from bot_app.db.common.chats import ChatsTable
from bot_app.misc import router, bot
from bot_app.utils.logger import log_chat_event


@router.my_chat_member()
async def handle_bot_promoted(event: ChatMemberUpdated):
    chat = event.chat
    me = await bot.get_me()

    if event.new_chat_member.user.id != me.id:
        return

    old_status = event.old_chat_member.status
    new_status = event.new_chat_member.status

    if old_status == ChatMemberStatus.ADMINISTRATOR and new_status != ChatMemberStatus.ADMINISTRATOR:
        log_chat_event(chat.id, chat.title, "‚¨áÔ∏è –ë–æ—Ç —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∫–∏")

    elif new_status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]:
        log_chat_event(chat.id, chat.title, "‚ùå –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")

    elif new_status == ChatMemberStatus.MEMBER:
        log_chat_event(chat.id, chat.title, "‚ûï –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫")

    elif old_status != ChatMemberStatus.ADMINISTRATOR and new_status == ChatMemberStatus.ADMINISTRATOR:
        try:
            await ChatsTable.add_chat(chat.id, chat.title, event.from_user.id, chat.type)
            log_chat_event(chat.id, chat.title, "‚¨ÜÔ∏è –ë–æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º")
            log_chat_event(chat.id, chat.title, "üì¶ –ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±–∞–∑–µ")
        except PostgresError as e:
            log_chat_event(chat.id, chat.title, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")
