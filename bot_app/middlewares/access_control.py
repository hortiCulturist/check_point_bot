from typing import Callable, Dict, Awaitable

from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.types import Message

from bot_app.config import ADMIN_ID
from bot_app.db.common.chats import ChatsTable
from bot_app.db.common.task_completions import TaskCompletionTable
from bot_app.markups.user.base import get_start_button
from bot_app.misc import bot, redis
from bot_app.utils.logger import log_chat_event


class AccessControlMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[Message, Dict], Awaitable],
        message: Message,
        data: Dict
    ) -> Awaitable:

        user_id = message.from_user.id
        chat_id = message.chat.id

        print(f"\nüß≠ Middleware Triggered | user: {user_id}, chat: {chat_id}, type: {message.chat.type}")

        if user_id in ADMIN_ID:
            print("üîì –ü—Ä–æ–ø—É—â–µ–Ω ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
            return await handler(message, data)

        if message.chat.type != "supergroup":
            print("üí¨ –ü—Ä–æ–ø—É—â–µ–Ω ‚Äî –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞")
            return await handler(message, data)

        if not await ChatsTable.is_active(chat_id):
            print(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω ‚Äî –≥—Ä—É–ø–ø–∞ {chat_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            return await handler(message, data)

        cache_key = f"verified:{chat_id}:{user_id}"
        cached = await redis.get(cache_key)

        if cached:
            print(f"üß† –ü—Ä–æ–ø—É—â–µ–Ω ‚Äî –Ω–∞–π–¥–µ–Ω –∫–µ—à: {cache_key}")
            return await handler(message, data)

        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è?")
        completed = await TaskCompletionTable.has_completed_all(user_id, chat_id)
        print(f"‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è? ‚Äî {completed}")

        if completed:
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à: {cache_key}")
            await redis.set(cache_key, "1", ex=86400)
            return await handler(message, data)

        print(f"‚õî –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º {user_id} –≤ —á–∞—Ç–µ {chat_id}")
        try:
            await bot.delete_message(chat_id, message.message_id)
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions={"can_send_messages": False}
            )

            await bot.send_message(
                chat_id=chat_id,
                text="üëã –ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–µ ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:",
                reply_markup=await get_start_button(chat_id)
            )

            log_chat_event(chat_id, "Bot", f"üîí {user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ auto-–º—É—Ç–µ: {e}")
            log_chat_event(chat_id, "Bot", f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ auto-–º—É—Ç–µ: {e}")
