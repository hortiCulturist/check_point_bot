import logging

from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot_app.db.common.tasks import TaskTable
from bot_app.db.user.base import UserChatLinkTable, UserTable
from bot_app.misc import router
from bot_app.states.user.base import AccessFlow
from datetime import datetime

logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def start_handler(message: Message, state: FSMContext):
    text = message.text.strip()

    if text == "/start":
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —á–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏."
        )
        return

    if text.startswith("/start group__"):
        payload = text.removeprefix("/start ").strip()
        try:
            chat_id = int(payload.replace("group__", "-"))
        except ValueError:
            return await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")

        user = message.from_user
        user_id = user.id

        await UserTable.add_user(user_id, user.username, user.full_name)
        await UserChatLinkTable.add_link(user_id, chat_id)

        await state.update_data(
            chat_id=chat_id,
            user_id=user_id,
            start_time=datetime.utcnow().isoformat()
        )
        await state.set_state(AccessFlow.waiting_for_check)

        tasks = await TaskTable.get_active_tasks(chat_id)

        if tasks:
            from bot_app.markups.user.base import get_tasks_markup
            markup = get_tasks_markup(tasks)

            titles = "\n".join([f"üîπ {task['title']}" for task in tasks])
            text = f"üìã –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è:\n\n{titles}\n\nüëâ –ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        else:
            from bot_app.markups.user.base import check_ready_kb
            markup = check_ready_kb()
            text = "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø."

        await message.answer(text, reply_markup=markup)
        return

    await message.answer("‚ùóÔ∏è–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
